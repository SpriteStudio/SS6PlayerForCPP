/**
	SS6Player for CPP(C++/ssbp2)
	Platform: OpenGL(GLFW+GLEW)

	Copyright(C) Web Technology Corp.
	All rights reserved.
*/
/* -------------------------------------------------------------------------- */
/*                                                 Includes / Compile-Options */
/* -------------------------------------------------------------------------- */
#include "ss6player_types.h"

#include <math.h>

namespace SpriteStudio6	{
/* -------------------------------------------------------------------------- */
/*                          [File-Scope internal] Defines (Value-Type Macros) */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                       [File-Scope internal] Classes / Structures / Typedef */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                            [File-Scope internal] Variables */
/* -------------------------------------------------------------------------- */
/* シグネチャ関係 */
namespace Platform	{
const char* SignatureNamePlatform = "(SS6Player for CPP) Platform-Implementation for OpenGL";
const char* SignatureVersionPlatform = "1.0.2";
const char* SignatureAuthorPlatform = "Web Technology Corp.";
}	/* Platform */

/* CPU::Vector2関係 */
const CPU::Vector2 CPU::Vector2::Zero(0.0f, 0.0f);					/* 全要素0.0f */
const CPU::Vector2 CPU::Vector2::One(1.0f, 1.0f);;					/* 全要素1.0f */

/* CPU::Vector3関係 */
const CPU::Vector3 CPU::Vector3::Zero(0.0f, 0.0f, 0.0f);			/* 全要素0.0f */
const CPU::Vector3 CPU::Vector3::One(1.0f, 1.0f, 1.0f);				/* 全要素1.0f */
const CPU::Vector3 CPU::Vector3::AxisX(1.0f, 0.0f, 0.0f);			/* X要素のみ1.0f（Y,Zは0.0f） */
const CPU::Vector3 CPU::Vector3::AxisY(0.0f, 1.0f, 0.0f);			/* Y要素のみ1.0f（X,Zは0.0f） */
const CPU::Vector3 CPU::Vector3::AxisZ(0.0f, 0.0f, 1.0f);			/* Z要素のみ1.0f（X,Yは0.0f） */

/* CPU::Vector4関係 */
const CPU::Vector4 CPU::Vector4::Zero(0.0f, 0.0f, 0.0f, 0.0f);		/* 全要素0.0f */
const CPU::Vector4 CPU::Vector4::One(1.0f, 1.0f, 1.0f, 1.0f);		/* 全要素1.0f */
const CPU::Vector4 CPU::Vector4::Origin(0.0f, 0.0f, 0.0f, 1.0f);	/* 同次原点（X,Y,Z = 0.0f, W=1.0f） */
const CPU::Vector4 CPU::Vector4::AxisX(1.0f, 0.0f, 0.0f, 0.0f);		/* X要素のみ1.0f（Y,Z,Wは0.0f） */
const CPU::Vector4 CPU::Vector4::AxisY(0.0f, 1.0f, 0.0f, 0.0f);		/* Y要素のみ1.0f（X,Z,Wは0.0f） */
const CPU::Vector4 CPU::Vector4::AxisZ(0.0f, 0.0f, 1.0f, 0.0f);		/* Z要素のみ1.0f（X,Y,Wは0.0f） */
const CPU::Vector4 CPU::Vector4::AxisW(0.0f, 0.0f, 0.0f, 1.0f);		/* W要素のみ1.0f（X,Y,Zは0.0f） *//* 同次座標用 */

/* CPU::Color関係 */
const CPU::Color CPU::Color::Clear(0.0f, 0.0f, 0.0, 0.0f);			/* 全要素0.0f */
const CPU::Color CPU::Color::White(1.0f, 1.0f, 1.0, 1.0f);			/* 純白（全要素1.0f） */
const CPU::Color CPU::Color::Black(0.0f, 0.0f, 0.0, 1.0f);			/* 純黒（R,G,B = 0.0f, A=1.0f） */

/* CPU::Matrix4x3関係 */
const CPU::Matrix4x3 CPU::Matrix4x3::Zero(	CPU::Vector3::Zero,
											CPU::Vector3::Zero,
											CPU::Vector3::Zero,
											CPU::Vector3::Zero
										);							/* 全要素0.0f */
const CPU::Matrix4x3 CPU::Matrix4x3::Unit(	CPU::Vector3::AxisX,
											CPU::Vector3::AxisY,
											CPU::Vector3::AxisZ,
											CPU::Vector3::Zero
										);							/* 単位行列 */

/* CPU::Matrix4x4関係 */
const CPU::Matrix4x4 CPU::Matrix4x4::Zero(	CPU::Vector4::Zero,
											CPU::Vector4::Zero,
											CPU::Vector4::Zero,
											CPU::Vector4::Zero
										);							/* 全要素0.0f */
const CPU::Matrix4x4 CPU::Matrix4x4::Unit(	CPU::Vector4::AxisX,
											CPU::Vector4::AxisY,
											CPU::Vector4::AxisZ,
											CPU::Vector4::AxisW
										);							/* 単位行列 */

/* CPU::Rect関係 */
const CPU::Rect CPU::Rect::Zero(0.0f, 0.0f, 0.0f, 0.0f);				/* 座標(0.0f, 0.0f),大きさ(0.0f, 0,0f) */

/* FPU::Vector2関係 */
const FPU::Vector2 FPU::Vector2::Zero(0.0f, 0.0f);					/* 全要素0.0f */
const FPU::Vector2 FPU::Vector2::One(1.0f, 1.0f);;					/* 全要素1.0f */

/* FPU::Vector3関係 */
const FPU::Vector3 FPU::Vector3::Zero(0.0f, 0.0f, 0.0f);			/* 全要素0.0f */
const FPU::Vector3 FPU::Vector3::One(1.0f, 1.0f, 1.0f);				/* 全要素1.0f */
const FPU::Vector3 FPU::Vector3::AxisX(1.0f, 0.0f, 0.0f);			/* X要素のみ1.0f（Y,Zは0.0f） */
const FPU::Vector3 FPU::Vector3::AxisY(0.0f, 1.0f, 0.0f);			/* Y要素のみ1.0f（X,Zは0.0f） */
const FPU::Vector3 FPU::Vector3::AxisZ(0.0f, 0.0f, 1.0f);			/* Z要素のみ1.0f（X,Yは0.0f） */

/* FPU::Vector4関係 */
const FPU::Vector4 FPU::Vector4::Zero(0.0f, 0.0f, 0.0f, 0.0f);		/* 全要素0.0f */
const FPU::Vector4 FPU::Vector4::One(1.0f, 1.0f, 1.0f, 1.0f);		/* 全要素1.0f */
const FPU::Vector4 FPU::Vector4::Origin(0.0f, 0.0f, 0.0f, 1.0f);	/* 同次原点（X,Y,Z = 0.0f, W=1.0f） */
const FPU::Vector4 FPU::Vector4::AxisX(1.0f, 0.0f, 0.0f, 0.0f);		/* X要素のみ1.0f（Y,Z,Wは0.0f） */
const FPU::Vector4 FPU::Vector4::AxisY(0.0f, 1.0f, 0.0f, 0.0f);		/* Y要素のみ1.0f（X,Z,Wは0.0f） */
const FPU::Vector4 FPU::Vector4::AxisZ(0.0f, 0.0f, 1.0f, 0.0f);		/* Z要素のみ1.0f（X,Y,Wは0.0f） */
const FPU::Vector4 FPU::Vector4::AxisW(0.0f, 0.0f, 0.0f, 1.0f);		/* W要素のみ1.0f（X,Y,Zは0.0f） *//* 同次座標用 */

/* CPU::Color関係 */
const FPU::Color FPU::Color::Clear(0.0f, 0.0f, 0.0, 0.0f);			/* 全要素0.0f */
const FPU::Color FPU::Color::White(1.0f, 1.0f, 1.0, 1.0f);			/* 純白（全要素1.0f） */
const FPU::Color FPU::Color::Black(0.0f, 0.0f, 0.0, 1.0f);			/* 純黒（R,G,B = 0.0f, A=1.0f） */

/* FPU::Matrix4x3関係 */
const FPU::Matrix4x3 FPU::Matrix4x3::Zero(	FPU::Vector3::Zero,
											FPU::Vector3::Zero,
											FPU::Vector3::Zero,
											FPU::Vector3::Zero
										);							/* 全要素0.0f */
const FPU::Matrix4x3 FPU::Matrix4x3::Unit(	FPU::Vector3::AxisX,
											FPU::Vector3::AxisY,
											FPU::Vector3::AxisZ,
											FPU::Vector3::Zero
										);							/* 単位行列 */

/* FPU::Matrix4x4関係 */
const FPU::Matrix4x4 FPU::Matrix4x4::Zero(	FPU::Vector4::Zero,
											FPU::Vector4::Zero,
											FPU::Vector4::Zero,
											FPU::Vector4::Zero
										);							/* 全要素0.0f */
const FPU::Matrix4x4 FPU::Matrix4x4::Unit(	FPU::Vector4::AxisX,
											FPU::Vector4::AxisY,
											FPU::Vector4::AxisZ,
											FPU::Vector4::AxisW
										);							/* 単位行列 */

/* 文字列関係 */
const char* TextEmpty = "";

/* ラジアン関係 */
#define SS6_PI (3.14159265359f)	/* 円周率: 3.141592653589793... */
const float PI = SS6_PI;											/* 円周率 */
const float CoefficientRadianToDegree = 360.0f / (SS6_PI * 2.0f);	/* 変換係数: ラジアン→角度 */
const float CoefficientDegreeToRadian = (SS6_PI * 2.0f) / 360.0f;	/* 変換係数: 角度→ラジアン */

/* -------------------------------------------------------------------------- */
/*              [File-Scope internal] Inline-Functions / Function-Type Macros */
/* -------------------------------------------------------------------------- */
/* ********************************************************* */
//! ベクトル同士の積和
/*!
@param	_lhs_
	（CPU::Vector4かFPU::Vector4）左項
@param	_rhs_
	（CPU::Vector4かFPU::Vector4）右項

@retval	計算結果
*/
#define VectorMAC(_lhs_,_rhs_)	((_lhs_.GetX() * _rhs_.GetX()) + (_lhs_.GetY() * _rhs_.GetY()) + (_lhs_.GetZ() * _rhs_.GetZ()) + (_lhs_.GetW() * _rhs_.GetW()))

/* -------------------------------------------------------------------------- */
/*                                  [File-Scope internal] Function Prototypes */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                               CPU::Vector2 */
/* -------------------------------------------------------------------------- */
namespace CPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector2::Vector2(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector2::Vector2(float valueX, float valueY)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector2::Vector2(const Vector2& value)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Vector2::Vector2(const FPU::Vector2& value)
{
	Element[KindElement::X] = (GLfloat)(value.GetX());
	Element[KindElement::Y] = (GLfloat)(value.GetY());
}

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector2::~Vector2(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector2::Set(const Vector2& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Vector2::Set(const FPU::Vector2& value)
{
	Element[KindElement::X] = (GLfloat)(value.GetX());
	Element[KindElement::Y] = (GLfloat)(value.GetY());
}

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector2::Set(float valueX, float valueY)

/* ********************************************************* */
//! X成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector2::SetX(float value)

/* ********************************************************* */
//! X成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector2::GetX(void) const

/* ********************************************************* */
//! Y成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector2::SetY(float value)

/* ********************************************************* */
//! Y成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector2::GetY(void) const
}	/* CPU */

/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                               CPU::Vector3 */
/* -------------------------------------------------------------------------- */
namespace CPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector3::Vector3(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector3::Vector3(float valueX, float valueY, float valueZ)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector3::Vector3(const Vector3& value)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Vector3::Vector3(const FPU::Vector3& value)
{
	Element[KindElement::X] = (GLfloat)(value.GetX());
	Element[KindElement::Y] = (GLfloat)(value.GetY());
	Element[KindElement::Z] = (GLfloat)(value.GetZ());
}

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector3::~Vector3(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::Set(const Vector3& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Vector3::Set(const FPU::Vector3& value)
{
	Element[KindElement::X] = (GLfloat)(value.GetX());
	Element[KindElement::Y] = (GLfloat)(value.GetY());
	Element[KindElement::Z] = (GLfloat)(value.GetZ());
}

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::Set(float valueX, float valueY, float valueZ)

/* ********************************************************* */
//! X成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::SetX(float value)

/* ********************************************************* */
//! X成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector3::GetX(void) const

/* ********************************************************* */
//! Y成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::SetY(float value)

/* ********************************************************* */
//! Y成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector3::GetY(void) const

/* ********************************************************* */
//! Z成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::SetZ(float value)

/* ********************************************************* */
//! Z成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector3::GetZ(void) const
}	/* CPU */

/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                               CPU::Vector4 */
/* -------------------------------------------------------------------------- */
namespace CPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector4::Vector4(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector4::Vector4(float valueX, float valueY, float valueZ, float valueW)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector4::Vector4(const Vector4& value)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Vector4::Vector4(const FPU::Vector4& value)
{
	Element[KindElement::X] = (GLfloat)(value.GetX());
	Element[KindElement::Y] = (GLfloat)(value.GetY());
	Element[KindElement::Z] = (GLfloat)(value.GetZ());
	Element[KindElement::W] = (GLfloat)(value.GetW());
}

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector4::~Vector4(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::Set(const Vector4& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Vector4::Set(const FPU::Vector4& value)
{
	Element[KindElement::X] = (GLfloat)(value.GetX());
	Element[KindElement::Y] = (GLfloat)(value.GetY());
	Element[KindElement::Z] = (GLfloat)(value.GetZ());
	Element[KindElement::W] = (GLfloat)(value.GetW());
}

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::Set(float valueX, float valueY, float valueZ, float valueW)

/* ********************************************************* */
//! X成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::SetX(float value)

/* ********************************************************* */
//! X成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector4::GetX(void) const

/* ********************************************************* */
//! Y成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::SetY(float value)

/* ********************************************************* */
//! Y成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector4::GetY(void) const

/* ********************************************************* */
//! Z成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::SetZ(float value)

/* ********************************************************* */
//! Z成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector4::GetZ(void) const

/* ********************************************************* */
//! W成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::SetW(float value)

/* ********************************************************* */
//! W成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector4::GetW(void) const
}	/* CPU */

/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                                 CPU::Color */
/* -------------------------------------------------------------------------- */
namespace CPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color::Color(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color::Color(float valueR, float valueG, float valueB, float valueA)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color::Color(const Color& value)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Color::Color(const FPU::Color& value)
{
	SetX(value.GetR());
	SetY(value.GetG());
	SetZ(value.GetB());
	SetW(value.GetA());
}

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Color::Color(const Color32& value)
{
	SetX((float)value.r * (1.0f / 255.0f));
	SetY((float)value.g * (1.0f / 255.0f));
	SetZ((float)value.b * (1.0f / 255.0f));
	SetW((float)value.a * (1.0f / 255.0f));
}

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color::~Color(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::Set(const Color& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Color::Set(const FPU::Color& value)
{
	SetX(value.GetR());
	SetY(value.GetG());
	SetZ(value.GetB());
	SetW(value.GetA());
}

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Color::Set(const Color32& value)
{
	SetX((float)value.r * (1.0f / 255.0f));
	SetY((float)value.g * (1.0f / 255.0f));
	SetZ((float)value.b * (1.0f / 255.0f));
	SetW((float)value.a * (1.0f / 255.0f));
}

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::Set(float valueR, float valueG, float valueB, float valueA)

/* ********************************************************* */
//! R成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::SetR(float value)

/* ********************************************************* */
//! R成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Color::GetR(void) const

/* ********************************************************* */
//! G成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::SetG(float value)

/* ********************************************************* */
//! G成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Color::GetG(void) const

/* ********************************************************* */
//! B成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::SetB(float value)

/* ********************************************************* */
//! B成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Color::GetB(void) const

/* ********************************************************* */
//! A成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::SetA(float value)

/* ********************************************************* */
//! A成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Color::GetA(void) const
}	/* CPU */

/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                               CPU::Color32 */
/* -------------------------------------------------------------------------- */
namespace CPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color32::Color32(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color32::Color32(Uint8 valueR, Uint8 valueG, Uint8 valueB, Uint8 valueA)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color32::Color32(Color& color)
}	/* CPU */

/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                                  CPU::Rect */
/* -------------------------------------------------------------------------- */
namespace CPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Rect::Rect(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Rect::Rect(float valueX, float valueY, float valueWidth, float valueHeight)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Rect::Rect(const Rect& value)

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Rect::~Rect(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Rect::Set(const Rect& value)

/* ********************************************************* */
//! 値の設定（左上座標＆縦横幅）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Rect::SetXYWH(float valueX, float valueY, float valueWidth, float valueHeight)

/* ********************************************************* */
//! 値の設定（対角座標）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Rect::SetLURD(float valueXMin, float valueYMin, float valueXMax, float valueYMax)

/* ********************************************************* */
//! 位置の取得（左上）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Rect::PositionGetLU(CPU::Vector2* position)

/* ********************************************************* */
//! サイズの取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Rect::SizeGet(CPU::Vector2* size)
}	/* CPU */

/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                             CPU::Matrix4x3 */
/* -------------------------------------------------------------------------- */
namespace CPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Matrix4x3::Matrix4x3(void)
{
	Set(Unit);
}

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Matrix4x3::Matrix4x3(	float _m00, float _m10, float _m20, float _m30,
						float _m01, float _m11, float _m21, float _m31,
						float _m02, float _m12, float _m22, float _m32
				)
{
	Element[KindElement::M00] = (GLfloat)_m00;
	Element[KindElement::M10] = (GLfloat)_m10;
	Element[KindElement::M20] = (GLfloat)_m20;
	Element[KindElement::M30] = (GLfloat)_m30;

	Element[KindElement::M01] = (GLfloat)_m01;
	Element[KindElement::M11] = (GLfloat)_m11;
	Element[KindElement::M21] = (GLfloat)_m21;
	Element[KindElement::M31] = (GLfloat)_m31;

	Element[KindElement::M02] = (GLfloat)_m02;
	Element[KindElement::M12] = (GLfloat)_m12;
	Element[KindElement::M22] = (GLfloat)_m22;
	Element[KindElement::M32] = (GLfloat)_m32;
}

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Matrix4x3::Matrix4x3(const Vector3& axisX, const Vector3& axisY, const Vector3& axisZ, const Vector3& axisW)
{
	Set(axisX, axisY, axisZ, axisW);
}

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Matrix4x3::Matrix4x3(const Matrix4x3& value)
{
	Set(value);
}

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Matrix4x3::Matrix4x3(const FPU::Matrix4x3& value)
{
	Set(value.Value);
}

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x3::~Matrix4x3(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Matrix4x3::Set(const Matrix4x3& value)
{
	for(int i=KindElement::M00; i<KindElement::TERMINATOR; i++)	{
		Element[i] = value.Element[i];
	}
}

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Matrix4x3::Set(const FPU::Matrix4x3& value)
{
	Set(value.Value);
}

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Matrix4x3::Set(const Vector3& axisX, const Vector3& axisY, const Vector3& axisZ, const Vector3& axisW)
{
	Element[KindElement::M00] = (GLfloat)axisX.GetX();
	Element[KindElement::M10] = (GLfloat)axisY.GetX();
	Element[KindElement::M20] = (GLfloat)axisZ.GetX();
	Element[KindElement::M30] = (GLfloat)axisW.GetX();

	Element[KindElement::M01] = (GLfloat)axisX.GetY();
	Element[KindElement::M11] = (GLfloat)axisY.GetY();
	Element[KindElement::M21] = (GLfloat)axisZ.GetY();
	Element[KindElement::M31] = (GLfloat)axisW.GetY();

	Element[KindElement::M02] = (GLfloat)axisX.GetZ();
	Element[KindElement::M12] = (GLfloat)axisY.GetZ();
	Element[KindElement::M22] = (GLfloat)axisZ.GetZ();
	Element[KindElement::M32] = (GLfloat)axisW.GetZ();
}
}	/* CPU */

/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                             CPU::Matrix4x4 */
/* -------------------------------------------------------------------------- */
namespace CPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Matrix4x4::Matrix4x4(void)
{
	Set(Unit);
}

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Matrix4x4::Matrix4x4(	float _m00, float _m10, float _m20, float _m30,
						float _m01, float _m11, float _m21, float _m31,
						float _m02, float _m12, float _m22, float _m32,
						float _m03, float _m13, float _m23, float _m33
				)
{
	Element[KindElement::M00] = (GLfloat)_m00;
	Element[KindElement::M10] = (GLfloat)_m10;
	Element[KindElement::M20] = (GLfloat)_m20;
	Element[KindElement::M30] = (GLfloat)_m30;

	Element[KindElement::M01] = (GLfloat)_m01;
	Element[KindElement::M11] = (GLfloat)_m11;
	Element[KindElement::M21] = (GLfloat)_m21;
	Element[KindElement::M31] = (GLfloat)_m31;

	Element[KindElement::M02] = (GLfloat)_m02;
	Element[KindElement::M12] = (GLfloat)_m12;
	Element[KindElement::M22] = (GLfloat)_m22;
	Element[KindElement::M32] = (GLfloat)_m32;

	Element[KindElement::M03] = (GLfloat)_m03;
	Element[KindElement::M13] = (GLfloat)_m13;
	Element[KindElement::M23] = (GLfloat)_m23;
	Element[KindElement::M33] = (GLfloat)_m33;
}

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Matrix4x4::Matrix4x4(const Vector4& axisX, const Vector4& axisY, const Vector4& axisZ, const Vector4& axisW)
{
	Set(axisX, axisY, axisZ, axisW);
}

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Matrix4x4::Matrix4x4(const Matrix4x4& value)
{
	Set(value);
}

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
Matrix4x4::Matrix4x4(const FPU::Matrix4x4& value)
{
	Set(value.Value);
}

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x4::~Matrix4x4(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Matrix4x4::Set(const Matrix4x4& value)
{
	for(int i=KindElement::M00; i<KindElement::TERMINATOR; i++)	{
		Element[i] = value.Element[i];
	}
}

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Matrix4x4::Set(const FPU::Matrix4x4& value)
{
	Set(value.Value);
}

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void Matrix4x4::Set(const Vector4& axisX, const Vector4& axisY, const Vector4& axisZ, const Vector4& axisW)
{
	Element[KindElement::M00] = (GLfloat)axisX.GetX();
	Element[KindElement::M10] = (GLfloat)axisY.GetX();
	Element[KindElement::M20] = (GLfloat)axisZ.GetX();
	Element[KindElement::M30] = (GLfloat)axisW.GetX();

	Element[KindElement::M01] = (GLfloat)axisX.GetY();
	Element[KindElement::M11] = (GLfloat)axisY.GetY();
	Element[KindElement::M21] = (GLfloat)axisZ.GetY();
	Element[KindElement::M31] = (GLfloat)axisW.GetY();

	Element[KindElement::M02] = (GLfloat)axisX.GetZ();
	Element[KindElement::M12] = (GLfloat)axisY.GetZ();
	Element[KindElement::M22] = (GLfloat)axisZ.GetZ();
	Element[KindElement::M32] = (GLfloat)axisW.GetZ();

	Element[KindElement::M03] = (GLfloat)axisX.GetW();
	Element[KindElement::M13] = (GLfloat)axisY.GetW();
	Element[KindElement::M23] = (GLfloat)axisZ.GetW();
	Element[KindElement::M33] = (GLfloat)axisW.GetW();
}
}	/* CPU */


/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                               FPU::Vector2 */
/* -------------------------------------------------------------------------- */
namespace FPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector2::Vector2(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector2::Vector2(float valueX, float valueY)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector2::Vector2(const Vector2& value)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector2::Vector2(const CPU::Vector2& value)

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector2::~Vector2(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector2::Set(float valueX, float valueY)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector2::Set(const Vector2& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector2::Set(const CPU::Vector2& value)

/* ********************************************************* */
//! 値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector2::Get(float* valueX, float* valueY) const

/* ********************************************************* */
//! X成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector2::SetX(float value)

/* ********************************************************* */
//! X成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector2::GetX(void) const

/* ********************************************************* */
//! Y成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector2::SetY(float value)

/* ********************************************************* */
//! Y成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector2::GetY(void) const
}	/* FPU */


/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                               FPU::Vector3 */
/* -------------------------------------------------------------------------- */
namespace FPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector3::Vector3(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector3::Vector3(float valueX, float valueY, float valueZ)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector3::Vector3(const Vector3& value)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector3::Vector3(const CPU::Vector3& value)

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector3::~Vector3(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::Set(float valueX, float valueY, float valueZ)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::Set(const Vector3& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::Set(const CPU::Vector3& value)

/* ********************************************************* */
//! 値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::Get(float* valueX, float* valueY, float* valueZ) const

/* ********************************************************* */
//! X成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::SetX(float value)

/* ********************************************************* */
//! X成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector3::GetX(void) const

/* ********************************************************* */
//! Y成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::SetY(float value)

/* ********************************************************* */
//! Y成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector3::GetY(void) const

/* ********************************************************* */
//! Z成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector3::SetZ(float value)

/* ********************************************************* */
//! Z成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector3::GetZ(void) const
}	/* FPU */


/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                               FPU::Vector4 */
/* -------------------------------------------------------------------------- */
namespace FPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector4::Vector4(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector4::Vector4(float valueX, float valueY, float valueZ, float valueW)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector4::Vector4(const Vector4& value)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector4::Vector4(const CPU::Vector4& value)

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Vector4::~Vector4(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::Set(float valueX, float valueY, float valueZ, float valueW)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::Set(const Vector4& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::Set(const CPU::Vector4& value)

/* ********************************************************* */
//! 値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::Get(float* valueX, float* valueY, float* valueZ, float* valueW) const

/* ********************************************************* */
//! X成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::SetX(float value)

/* ********************************************************* */
//! X成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector4::GetX(void) const

/* ********************************************************* */
//! Y成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::SetY(float value)

/* ********************************************************* */
//! Y成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector4::GetY(void) const

/* ********************************************************* */
//! Z成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::SetZ(float value)

/* ********************************************************* */
//! Z成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector4::GetZ(void) const

/* ********************************************************* */
//! W成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Vector4::SetW(float value)

/* ********************************************************* */
//! W成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Vector4::GetW(void) const
}	/* FPU */


/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                               FPU::Vector4 */
/* -------------------------------------------------------------------------- */
namespace FPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color::Color(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color::Color(float valueR, float valueG, float valueB, float valueA)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color::Color(const Color& value):

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color::Color(const CPU::Color& value)

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Color::~Color(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::Set(float valueR, float valueG, float valueB, float valueA)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::Set(const Color& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::Set(const CPU::Color& value)

/* ********************************************************* */
//! 値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::Get(float* valueR, float* valueG, float* valueB, float* valueA) const

/* ********************************************************* */
//! R成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::SetR(float value)

/* ********************************************************* */
//! R成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Color::GetR(void) const

/* ********************************************************* */
//! G成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::SetG(float value)

/* ********************************************************* */
//! G成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Color::GetG(void) const

/* ********************************************************* */
//! B成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::SetB(float value)

/* ********************************************************* */
//! B成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Color::GetB(void) const

/* ********************************************************* */
//! A成分値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Color::SetA(float value)

/* ********************************************************* */
//! A成分値の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// float Color::GetA(void) const
}	/* FPU */


/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                             CPU::Matrix4x3 */
/* -------------------------------------------------------------------------- */
namespace FPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x3::Matrix4x3(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x3::Matrix4x3(	float _m00, float _m10, float _m20, float _m30,
//						float _m01, float _m11, float _m21, float _m31,
//						float _m02, float _m12, float _m22, float _m32
//				)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x3::Matrix4x3(const Vector3& axisX, const Vector3& axisY, const Vector3& axisZ, const Vector3& axisW)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x3::Matrix4x3(const Matrix4x3& value)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x3::Matrix4x3(const CPU::Matrix4x3& value)

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x3::~Matrix4x3(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Matrix4x3::Set(const Matrix4x3& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Matrix4x3::Set(const CPU::Matrix4x3& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Matrix4x3::Set(const Vector3& axisX, const Vector3& axisY, const Vector3& axisZ, const Vector3& axisW)
}	/* FPU */

/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/*                                                             CPU::Matrix4x4 */
/* -------------------------------------------------------------------------- */
namespace FPU	{
/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x4::Matrix4x4(void)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x4::Matrix4x4(	float _m00, float _m10, float _m20, float _m30,
//						float _m01, float _m11, float _m21, float _m31,
//						float _m02, float _m12, float _m22, float _m32,
//						float _m03, float _m13, float _m23, float _m33
//				)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x4::Matrix4x4(const Vector4& axisX, const Vector4& axisY, const Vector4& axisZ, const Vector4& axisW)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x4::Matrix4x4(const Matrix4x4& value)

/* ********************************************************* */
//! コンストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x4::Matrix4x4(const CPU::Matrix4x4& value)

/* ********************************************************* */
//! デストラクタ
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// Matrix4x4::~Matrix4x4(void)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Matrix4x4::Set(const Matrix4x4& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Matrix4x4::Set(const CPU::Matrix4x4& value)

/* ********************************************************* */
//! 値の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void Matrix4x4::Set(const Vector4& axisX, const Vector4& axisY, const Vector4& axisZ, const Vector4& axisW)
}	/* FPU */


/* -------------------------------------------------------------------------- */
/*                                                                  Functions */
/* -------------------------------------------------------------------------- */
/* ********************************************************* */
//! ベクトル同士の加算（ベクトル・CPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void VectorAdd(CPU::Vector2* result, const CPU::Vector2& lhs, const CPU::Vector2& rhs)
// void VectorAdd(CPU::Vector3* result, const CPU::Vector3& lhs, const CPU::Vector3& rhs)
// void VectorAdd(CPU::Vector4* result, const CPU::Vector4& lhs, const CPU::Vector4& rhs)

/* ********************************************************* */
//! ベクトル同士の加算（ベクトル・FPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void VectorAdd(FPU::Vector2* result, const FPU::Vector2& lhs, const FPU::Vector2& rhs)
// void VectorAdd(FPU::Vector3* result, const FPU::Vector3& lhs, const FPU::Vector3& rhs)
// void VectorAdd(FPU::Vector4* result, const FPU::Vector4& lhs, const FPU::Vector4& rhs)

/* ********************************************************* */
//! ベクトル同士の減算（ベクトル・CPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void VectorSub(CPU::Vector2* result, const CPU::Vector2& lhs, const CPU::Vector2& rhs)
// void VectorSub(CPU::Vector3* result, const CPU::Vector3& lhs, const CPU::Vector3& rhs)
// void VectorSub(CPU::Vector4* result, const CPU::Vector4& lhs, const CPU::Vector4& rhs)

/* ********************************************************* */
//! ベクトル同士の減算（ベクトル・FPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void VectorSub(FPU::Vector2* result, const FPU::Vector2& lhs, const FPU::Vector2& rhs)
// void VectorSub(FPU::Vector3* result, const FPU::Vector3& lhs, const FPU::Vector3& rhs)
// void VectorSub(FPU::Vector4* result, const FPU::Vector4& lhs, const FPU::Vector4& rhs)

/* ********************************************************* */
//! ベクトル同士の乗算（ベクトル・CPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void VectorMul(CPU::Vector2* result, const CPU::Vector2& lhs, const CPU::Vector2& rhs)
// void VectorMul(CPU::Vector3* result, const CPU::Vector3& lhs, const CPU::Vector3& rhs)
// void VectorMul(CPU::Vector4* result, const CPU::Vector4& lhs, const CPU::Vector4& rhs)

/* ********************************************************* */
//! ベクトル同士の乗算（ベクトル・FPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void VectorMul(FPU::Vector2* result, const FPU::Vector2& lhs, const FPU::Vector2& rhs)
// void VectorMul(FPU::Vector3* result, const FPU::Vector3& lhs, const FPU::Vector3& rhs)
// void VectorMul(FPU::Vector4* result, const FPU::Vector4& lhs, const FPU::Vector4& rhs)

/* ********************************************************* */
//! ベクトル同士の除算（ベクトル・CPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void VectorDiv(CPU::Vector2* result, const CPU::Vector2& lhs, const CPU::Vector2& rhs)
// void VectorDiv(CPU::Vector3* result, const CPU::Vector3& lhs, const CPU::Vector3& rhs)
// void VectorDiv(CPU::Vector4* result, const CPU::Vector4& lhs, const CPU::Vector4& rhs)

/* ********************************************************* */
//! ベクトル同士の除算（ベクトル・FPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void VectorDiv(FPU::Vector2* result, const FPU::Vector2& lhs, const FPU::Vector2& rhs)
// void VectorDiv(FPU::Vector3* result, const FPU::Vector3& lhs, const FPU::Vector3& rhs)
// void VectorDiv(FPU::Vector4* result, const FPU::Vector4& lhs, const FPU::Vector4& rhs)

/* ********************************************************* */
//! ベクトルをスカラ乗算（CPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void VectorMul(CPU::Vector2* result, const CPU::Vector2& lhs, Float32 rhs)
// void VectorMul(CPU::Vector3* result, const CPU::Vector3& lhs, Float32 rhs)
// void VectorMul(CPU::Vector4* result, const CPU::Vector4& lhs, Float32 rhs)

/* ********************************************************* */
//! ベクトルをスカラ乗算（FPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
// void VectorMul(FPU::Vector2* result, const FPU::Vector2& lhs, Float32 rhs)
// void VectorMul(FPU::Vector3* result, const FPU::Vector3& lhs, Float32 rhs)
// void VectorMul(FPU::Vector4* result, const FPU::Vector4& lhs, Float32 rhs)

/* ********************************************************* */
//! 行列同士の乗算（4x4行列・FPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void MatrixMul(FPU::Matrix4x4* result, const FPU::Matrix4x4& lhs, const FPU::Matrix4x4& rhs)
{
	/* MEMO: resultとlhs,rhsの実体が同じ可能性があるので、一旦テンポラリを挟むこと。 */
	const CPU::Vector4 vector0lhs(	lhs.Value.Element[CPU::Matrix4x4::KindElement::M00],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M01],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M02],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M03]
							);
	const CPU::Vector4 vector1lhs(	lhs.Value.Element[CPU::Matrix4x4::KindElement::M10],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M11],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M12],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M13]
							);
	const CPU::Vector4 vector2lhs(	lhs.Value.Element[CPU::Matrix4x4::KindElement::M20],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M21],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M22],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M23]
							);
	const CPU::Vector4 vector3lhs(	lhs.Value.Element[CPU::Matrix4x4::KindElement::M30],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M31],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M32],
									lhs.Value.Element[CPU::Matrix4x4::KindElement::M33]
							);

	const CPU::Vector4 axisXrhs(	rhs.Value.Element[CPU::Matrix4x4::KindElement::M00],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M10],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M20],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M30]
							);
	const CPU::Vector4 axisYrhs(	rhs.Value.Element[CPU::Matrix4x4::KindElement::M01],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M11],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M21],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M31]
							);
	const CPU::Vector4 axisZrhs(	rhs.Value.Element[CPU::Matrix4x4::KindElement::M02],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M12],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M22],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M32]
							);
	const CPU::Vector4 axisWrhs(	rhs.Value.Element[CPU::Matrix4x4::KindElement::M03],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M13],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M23],
									rhs.Value.Element[CPU::Matrix4x4::KindElement::M33]
							);

	result->Value.Element[CPU::Matrix4x4::KindElement::M00] = VectorMAC(axisXrhs, vector0lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M10] = VectorMAC(axisXrhs, vector1lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M20] = VectorMAC(axisXrhs, vector2lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M30] = VectorMAC(axisXrhs, vector3lhs);

	result->Value.Element[CPU::Matrix4x4::KindElement::M01] = VectorMAC(axisYrhs, vector0lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M11] = VectorMAC(axisYrhs, vector1lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M21] = VectorMAC(axisYrhs, vector2lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M31] = VectorMAC(axisYrhs, vector3lhs);

	result->Value.Element[CPU::Matrix4x4::KindElement::M02] = VectorMAC(axisZrhs, vector0lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M12] = VectorMAC(axisZrhs, vector1lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M22] = VectorMAC(axisZrhs, vector2lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M32] = VectorMAC(axisWrhs, vector3lhs);

	result->Value.Element[CPU::Matrix4x4::KindElement::M03] = VectorMAC(axisWrhs, vector0lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M13] = VectorMAC(axisWrhs, vector1lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M23] = VectorMAC(axisWrhs, vector2lhs);
	result->Value.Element[CPU::Matrix4x4::KindElement::M33] = VectorMAC(axisWrhs, vector3lhs);
}

/* ********************************************************* */
//! 逆行列の取得（4x4行列・FPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
bool MatrixInverse(FPU::Matrix4x4* result, const FPU::Matrix4x4& value)
{
	/* 行列式を算出 */
	/* MEMO: 逆行列成分と同じ部分はテンポラリしておく。 */
	const GLfloat* matrixIn = value.Value.Element;

	const Float32 m00 = matrixIn[CPU::Matrix4x4::KindElement::M00];
	const Float32 m10 = matrixIn[CPU::Matrix4x4::KindElement::M10];
	const Float32 m20 = matrixIn[CPU::Matrix4x4::KindElement::M20];
	const Float32 m30 = matrixIn[CPU::Matrix4x4::KindElement::M30];

	const Float32 m01 = matrixIn[CPU::Matrix4x4::KindElement::M01];
	const Float32 m11 = matrixIn[CPU::Matrix4x4::KindElement::M11];
	const Float32 m21 = matrixIn[CPU::Matrix4x4::KindElement::M21];
	const Float32 m31 = matrixIn[CPU::Matrix4x4::KindElement::M31];

	const Float32 m02 = matrixIn[CPU::Matrix4x4::KindElement::M02];
	const Float32 m12 = matrixIn[CPU::Matrix4x4::KindElement::M12];
	const Float32 m22 = matrixIn[CPU::Matrix4x4::KindElement::M22];
	const Float32 m32 = matrixIn[CPU::Matrix4x4::KindElement::M32];

	const Float32 m03 = matrixIn[CPU::Matrix4x4::KindElement::M03];
	const Float32 m13 = matrixIn[CPU::Matrix4x4::KindElement::M13];
	const Float32 m23 = matrixIn[CPU::Matrix4x4::KindElement::M23];
	const Float32 m33 = matrixIn[CPU::Matrix4x4::KindElement::M33];

	const Float32 m02m13 = m02 * m13;
	const Float32 m02m23 = m02 * m23;
	const Float32 m02m33 = m02 * m33;
	const Float32 m12m03 = m12 * m03;
	const Float32 m12m23 = m12 * m23;
	const Float32 m12m33 = m12 * m33;
	const Float32 m22m03 = m22 * m03;
	const Float32 m22m13 = m22 * m13;
	const Float32 m22m33 = m22 * m33;
	const Float32 m32m03 = m32 * m03;
	const Float32 m32m13 = m32 * m13;
	const Float32 m32m23 = m32 * m23;

	const Float32 s1 = (m11 * m22m33) + (m21 * m32m13) + (m31 * m12m23) - (m11 * m32m23) - (m21 * m12m33) - (m31 * m22m13);
	const Float32 s2 = (m01 * m32m23) + (m21 * m02m33) + (m31 * m22m03) - (m01 * m22m33) - (m21 * m32m03) - (m31 * m02m23);
	const Float32 s3 = (m01 * m12m33) + (m11 * m32m03) + (m31 * m02m13) - (m01 * m32m13) - (m11 * m02m33) - (m31 * m12m03);
	const Float32 s4 = (m01 * m22m13) + (m11 * m02m23) + (m21 * m12m03) - (m01 * m12m23) - (m11 * m22m03) - (m21 * m02m13);
	Float32	determinant = (m00 * s1) + (m10 * s2) + (m20 * s3) + (m30 * s4);

	if(0.0f == determinant)	{	/* 行列式が0 */
		result->Set(FPU::Matrix4x4::Zero);

		/* MEMO: 行列式を返しておくべきか？ */
		return(false);
	}

	/* 逆行列を算出 */
	const Float32 m01m12 = m01 * m12;
	const Float32 m01m22 = m01 * m22;
	const Float32 m01m32 = m01 * m32;
	const Float32 m01m13 = m01 * m13;
	const Float32 m01m23 = m01 * m23;
	const Float32 m01m33 = m01 * m33;
	const Float32 m11m02 = m11 * m02;
	const Float32 m11m22 = m11 * m22;
	const Float32 m11m32 = m11 * m32;
	const Float32 m11m03 = m11 * m03;
	const Float32 m11m23 = m11 * m23;
	const Float32 m11m33 = m11 * m33;
	const Float32 m21m02 = m21 * m02;
	const Float32 m21m12 = m21 * m12;
	const Float32 m21m32 = m21 * m32;
	const Float32 m21m03 = m21 * m03;
	const Float32 m21m13 = m21 * m13;
	const Float32 m21m33 = m21 * m33;
	const Float32 m31m02 = m31 * m02;
	const Float32 m31m12 = m31 * m12;
	const Float32 m31m22 = m31 * m22;
	const Float32 m31m03 = m31 * m03;
	const Float32 m31m13 = m31 * m13;
	const Float32 m31m23 = m31 * m23;

	const Float32 inverseDeterminant = 1.0f / determinant;	/* 1 / detA */

	GLfloat* matrixOut = result->Value.Element;

	matrixOut[CPU::Matrix4x4::KindElement::M00] = inverseDeterminant * s1;
	matrixOut[CPU::Matrix4x4::KindElement::M10] = inverseDeterminant * ((m10 * (m32m23 - m22m33)) + (m20 * (m12m33 - m32m13)) + (m30 * (m22m13 - m12m23)));
	matrixOut[CPU::Matrix4x4::KindElement::M20] = inverseDeterminant * ((m10 * (m21m33 - m31m23)) + (m20 * (m31m13 - m11m33)) + (m30 * (m11m23 - m21m13)));
	matrixOut[CPU::Matrix4x4::KindElement::M30] = inverseDeterminant * ((m10 * (m31m22 - m21m32)) + (m20 * (m11m32 - m31m12)) + (m30 * (m21m12 - m11m22)));

	matrixOut[CPU::Matrix4x4::KindElement::M01] = inverseDeterminant * s2;
	matrixOut[CPU::Matrix4x4::KindElement::M11] = inverseDeterminant * ((m00 * (m22m33 - m32m23)) + (m20 * (m32m03 - m02m33)) + (m30 * (m02m23 - m22m03)));
	matrixOut[CPU::Matrix4x4::KindElement::M21] = inverseDeterminant * ((m00 * (m31m23 - m21m33)) + (m20 * (m01m33 - m31m03)) + (m30 * (m21m03 - m01m23)));
	matrixOut[CPU::Matrix4x4::KindElement::M31] = inverseDeterminant * ((m00 * (m21m32 - m31m22)) + (m20 * (m31m02 - m01m32)) + (m30 * (m01m22 - m21m02)));

	matrixOut[CPU::Matrix4x4::KindElement::M02] = inverseDeterminant * s3;
	matrixOut[CPU::Matrix4x4::KindElement::M12] = inverseDeterminant * ((m00 * (m32m13 - m12m33)) + (m10 * (m02m33 - m32m03)) + (m30 * (m12m03 - m02m13)));
	matrixOut[CPU::Matrix4x4::KindElement::M22] = inverseDeterminant * ((m00 * (m11m33 - m31m13)) + (m10 * (m31m03 - m01m33)) + (m30 * (m01m13 - m11m03)));
	matrixOut[CPU::Matrix4x4::KindElement::M32] = inverseDeterminant * ((m00 * (m31m12 - m11m32)) + (m10 * (m01m32 - m31m02)) + (m30 * (m11m02 - m01m12)));

	matrixOut[CPU::Matrix4x4::KindElement::M03] = inverseDeterminant * s4;
	matrixOut[CPU::Matrix4x4::KindElement::M13] = inverseDeterminant * ((m00 * (m12m23 - m22m13)) + (m10 * (m22m03 - m02m23)) + (m20 * (m02m13 - m12m03)));
	matrixOut[CPU::Matrix4x4::KindElement::M23] = inverseDeterminant * ((m00 * (m21m13 - m11m23)) + (m10 * (m01m23 - m21m03)) + (m20 * (m11m03 - m01m13)));
	matrixOut[CPU::Matrix4x4::KindElement::M33] = inverseDeterminant * ((m00 * (m11m22 - m21m12)) + (m10 * (m21m02 - m01m22)) + (m20 * (m01m12 - m11m02)));

	return(true);
}

/* ********************************************************* */
//! 転置行列の取得（4x4行列・FPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void MatrixTranspose(FPU::Matrix4x4* result, const FPU::Matrix4x4& value)
{
	const GLfloat* matrixIn = value.Value.Element;

	const CPU::Vector4 axisX(	matrixIn[CPU::Matrix4x4::KindElement::M00],
								matrixIn[CPU::Matrix4x4::KindElement::M10],
								matrixIn[CPU::Matrix4x4::KindElement::M20],
								matrixIn[CPU::Matrix4x4::KindElement::M30]
						);
	const CPU::Vector4 axisY(	matrixIn[CPU::Matrix4x4::KindElement::M01],
								matrixIn[CPU::Matrix4x4::KindElement::M11],
								matrixIn[CPU::Matrix4x4::KindElement::M21],
								matrixIn[CPU::Matrix4x4::KindElement::M31]
						);
	const CPU::Vector4 axisZ(	matrixIn[CPU::Matrix4x4::KindElement::M02],
								matrixIn[CPU::Matrix4x4::KindElement::M12],
								matrixIn[CPU::Matrix4x4::KindElement::M22],
								matrixIn[CPU::Matrix4x4::KindElement::M32]
						);
	const CPU::Vector4 axisW(	matrixIn[CPU::Matrix4x4::KindElement::M03],
								matrixIn[CPU::Matrix4x4::KindElement::M13],
								matrixIn[CPU::Matrix4x4::KindElement::M23],
								matrixIn[CPU::Matrix4x4::KindElement::M33]
						);

	result->Value.Set(axisX, axisY, axisZ, axisW);
}

/* ********************************************************* */
//! 変形行列の設定
/* --------------------------------------------------------- */
/* MEMO:
 * 回転順序はX-Y-Zです。
 * 
 * TODO:
 * 後で必要なところだけ計算をして行列乗算にしないように最適化しようかと……。
 */
void MatrixCreateTRS(FPU::Matrix4x4* result, const FPU::Vector3& translate, const FPU::Vector3& rotation, const FPU::Vector3& scaling)
{

	/* 回転の角度をラジアンに変換 */
	FPU::Vector3 rotateRadian;
	VectorMul(&rotateRadian, rotation.Value, (3.14159265893f / 180.0f));

	/* 角度を変形行列に設定 */
	const float cosX = (float)(cos(rotateRadian.GetX()));
	const float sinX = (float)(sin(rotateRadian.GetX()));
	const float cosY = (float)(cos(rotateRadian.GetY()));
	const float sinY = (float)(sin(rotateRadian.GetY()));
	const float cosZ = (float)(cos(rotateRadian.GetZ()));
	const float sinZ = (float)(sin(rotateRadian.GetZ()));

	/* MEMO: X軸回転       1     0     0  */
	/*                     0  cosX -sinX  */
	/*                     0  sinX  cosX  */
	const FPU::Matrix4x4 matrixRotateX(	1.0f,	0.0f,	0.0f,	0.0f,
										0.0f,	cosX,	-sinX,	0.0f,
										0.0f,	sinX,	cosX,	0.0f,
										0.0f,	0.0f,	0.0f,	1.0f
									);
	/* MEMO: Y軸回転    cosY     0  sinY  */
	/*                     0     1     0  */
	/*                 -sinY     0  cosY  */
	const FPU::Matrix4x4 matrixRotateY(	cosY,	0.0f,	sinY,	0.0f,
										0.0f,	1.0f,	0.0f,	0.0f,
										-sinY,	0.0f,	cosY,	0.0f,
										0.0f,	0.0f,	0.0f,	1.0f
									);
	/* MEMO: Z軸回転    cosZ -sinZ     0  */
	/*                  sinZ  cosZ     0  */
	/*                     0     0     1  */
	const FPU::Matrix4x4 matrixRotateZ(	cosZ,	-sinZ,	0.0f,	0.0f,
										sinZ,	cosZ,	0.0f,	0.0f,
										0.0f,	0.0f,	1.0f,	0.0f,
										0.0f,	0.0f,	0.0f,	1.0f
									);

	FPU::Matrix4x4 matrixRotate;
	MatrixMul(&matrixRotate, matrixRotateY, matrixRotateX);
	MatrixMul(&matrixRotate, matrixRotate, matrixRotateZ);

	/* スケールを設定 */
	const FPU::Matrix4x4 matrixScale(	scaling.GetX(),	0.0,			0.0f,			0.0f,
										0.0f,			scaling.GetY(),	0.0f,			0.0f,
										0.0f,			0.0f,			scaling.GetZ(),	0.0f,
										0.0f,			0.0f,			0.0f,			1.0f
									);
	MatrixMul(result, matrixScale, matrixRotate);

	/* 平行移動成分を設定 */
	/* MEMO: 平行移動はそのまま入れてしまう。 */
	result->Value.Element[CPU::Matrix4x4::M30] = translate.GetX();
	result->Value.Element[CPU::Matrix4x4::M31] = translate.GetY();
	result->Value.Element[CPU::Matrix4x4::M32] = translate.GetZ();
}

/* ********************************************************* */
//! ベクトルの変形（4次元ベクトル＆4x4行列・FPU用）
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void VectorTransform(FPU::Vector4* result, const FPU::Vector4& vector, const FPU::Matrix4x4& matrix)
{
	const CPU::Vector4 axisXmatrix(	matrix.Value.Element[CPU::Matrix4x4::KindElement::M00],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M10],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M20],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M30]
								);
	const CPU::Vector4 axisYmatrix(	matrix.Value.Element[CPU::Matrix4x4::KindElement::M01],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M11],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M21],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M31]
								);
	const CPU::Vector4 axisZmatrix(	matrix.Value.Element[CPU::Matrix4x4::KindElement::M02],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M12],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M22],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M32]
								);
	const CPU::Vector4 axisWmatrix(	matrix.Value.Element[CPU::Matrix4x4::KindElement::M03],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M13],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M23],
									matrix.Value.Element[CPU::Matrix4x4::KindElement::M33]
								);

	result->Value.Element[CPU::Vector4::KindElement::X] = VectorMAC(axisXmatrix, vector);
	result->Value.Element[CPU::Vector4::KindElement::Y] = VectorMAC(axisYmatrix, vector);
	result->Value.Element[CPU::Vector4::KindElement::Z] = VectorMAC(axisZmatrix, vector);
	result->Value.Element[CPU::Vector4::KindElement::W] = VectorMAC(axisWmatrix, vector);
}

/* ********************************************************* */
//! 遠近法投影のプロジェクション行列の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void MatrixGetProjectionOrtho(CPU::Matrix4x4* result, float xLeft, float xRight, float yTop, float yBottom, float zNear, float zFar)
{
	const float width = xRight - xLeft;
	const float height = yTop - yBottom;
	const float depth = zFar - zNear;
	const float offsetX = xRight + xLeft;
	const float offsetY = yTop + yBottom;
	const float offsetZ = zFar + zNear;

	const CPU::Vector4 axisX(	2.0f / width,		0.0f,				0.0f,				0.0f	);	/* X軸ベクトル */
	const CPU::Vector4 axisY(	0.0f,				2.0f / height,		0.0f,				0.0f	);	/* Y軸ベクトル */
	const CPU::Vector4 axisZ(	0.0f,				0.0f,				1.0f / depth,		0.0f	);	/* Z軸ベクトル */
	const CPU::Vector4 axisW(	-offsetX / width,	-offsetY / height,	-offsetZ / depth,	1.0f	);	/* 原点座標 */

	result->Set(axisX, axisY, axisZ, axisW);
}

/* ********************************************************* */
//! 平行投影のプロジェクション行列の取得
/* --------------------------------------------------------- */
/* MEMO:
 * 
 */
void MatrixGetProjectionPerspective(CPU::Matrix4x4* result, float radianFOV, float ratioAspect, float zNear, float zFar)
{
	/* MEMO: 要追検証 */
	const float invHalfTanAngle = 1.0f / tanf(radianFOV * 0.5f);
	const float invRatioAspect = 1.0f / ratioAspect;
	const float invDepth = 1.0f / (zFar - zNear);

	const CPU::Vector4 axisX(	invRatioAspect * invHalfTanAngle,	0.0f,				0.0f,							0.0f	);	/* X軸ベクトル */
	const CPU::Vector4 axisY(	0.0f,								invHalfTanAngle,	0.0f,							0.0f	);	/* Y軸ベクトル */
	const CPU::Vector4 axisZ(	0.0f,								0.0f,				zFar * invDepth,				-1.0f	);	/* Z軸ベクトル */
	const CPU::Vector4 axisW(	0.0f,								0.0f,				-(zFar * zNear) * invDepth,		1.0f	);	/* 原点座標 */

	result->Set(axisX, axisY, axisZ, axisW);
}

}	/* SpriteStudio6 */
