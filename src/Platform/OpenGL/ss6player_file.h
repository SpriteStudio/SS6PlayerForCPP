/**
	SS6Player for CPP(C++/ssbp2)
	Platform: OpenGL(GLFW+GLEW)

	Copyright(C) Web Technology Corp.
	All rights reserved.
*/
/* ========================================================================== */
/* MEMO:                                                                      */
/* ファイル関係のユーティリティです。                                         */
/* SS6Playerへの直接的関係性はありません（単にメイン部でデータなどをストレー  */
/* ジから読み込む時に必要になるだけです）。                                   */
/* ========================================================================== */
#pragma once

/* -------------------------------------------------------------------------- */
/*                                                 Includes / Compile-Options */
/* -------------------------------------------------------------------------- */
#include "../00/ss6player_file.h"
#include "ss6player_types.h"

namespace SpriteStudio6	{
namespace Platform	{
namespace OpenGL	{

/* -------------------------------------------------------------------------- */
/*                                                Defines (Value-Type Macros) */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                            Classes / Structures / Typedefs */
/* -------------------------------------------------------------------------- */
class File final : public SpriteStudio6::Platform::FileAbstract
{
	/* ********************************************************* */
//! データファイルのロード
/*!
@param	handleHeap
	ヒープハンドルの格納先
@param	path
	ファイルパス（文字エンコード: UTF-8）
@param	alignment
	ファイルを配置するメモリアライメント

@retval	関数値
	ファイルを読み込んだメモリアドレス（データハンドル）
	nullptr == エラー
@retval	handleHeap
	ヒープハンドル
	※実際に読み込みに使われているメモリのポインタです。
	※エラー時はnullptrです。

ストレージからファイルを読み込みます。
関数値（データハンドル）とヒープハンドルの違いについては、ヒープ
	ハンドルが実際に読み込まれているヒープ領域のポインタで、ヒー
	プ領域内に実際にファイルが配置されている先頭ポインタが関数値
	になります。
ファイル開始位置（＝関数値＝データハンドル）はalignmentで指定した
	アライメントを守ったアドレスに配置されています。
alignmentは、プラットフォームのファイル機能がメモリに求めるアラ
	イメントと読み込まれたファイルを実際に使用する際に求められる
	アライメントの双方を満たしていなくてはなりません。
*/
void* DataLoad(void** handleHeap, const char* path, size_t alignment) override;

/* ********************************************************* */
//! データファイルの解放
/*!
@param	handleHeap
	ヒープハンドル

@retval	なし

ストレージから読んだファイルのメモリ領域を解放します。
※メモリ領域を解放しているだけです。
*/
void DataRelease(void* handleHeap) override;

/* ********************************************************* */
//! テキストファイルのロード（OpenGL実装のみ）
/*!
@param	handleHeap
	ヒープハンドルの格納先
@param	path
	ファイルパス（文字エンコード: UTF-8）
@param	alignment
	ファイルを配置するメモリアライメント

@retval	関数値
	ファイルを読み込んだメモリアドレス（データハンドル）
	nullptr == エラー
@retval	handleHeap
	ヒープハンドル
	※実際に読み込みに使われているメモリのポインタです。
	※エラー時はnullptrです。

ストレージからテキストファイルを読み込みます。
OpenGL版のみでの実装です（上層から使用しないで下さい）。
※シェーダのソースファイルを読むためだけに使用しています。

ファイルの読み込み領域のバイトサイズが+1されて、終端文字が追加
されます。

それ以外については、DataLoadと同じです。
*/
void* TextLoad(void** handleHeap, const char* path, size_t alignment) override;
};

/* -------------------------------------------------------------------------- */
/*                                                                  Variables */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                    Inline-Functions / Function-Type Macros */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                                        Function Prototypes */
/* -------------------------------------------------------------------------- */

}	/* File */
}	/* Platform */
}	/* SpriteStudio6 */
